STAT: include config: sample.jconf
STAT: jconf successfully finalized
STAT: *** loading AM00 _default
Stat: init_phmm: Reading in HMM definition
Stat: rdhmmdef: ascii format HMM definition
Stat: rdhmmdef: limit check passed
Stat: check_hmm_restriction: an HMM with several arcs from initial state found: "sp"
Stat: rdhmmdef: this HMM requires multipath handling at decoding
Stat: rdhmmdef: no <SID> embedded
Stat: rdhmmdef: assign SID by the order of appearance
Stat: init_phmm: defined HMMs:    44
Stat: init_phmm: logical names:    44
Stat: init_phmm: base phones:    25 used in logical
Stat: init_phmm: finished reading HMM definitions
STAT: making pseudo bi/mono-phone for IW-triphone
Stat: hmm_lookup: 72 pseudo phones are added to logical HMM list
STAT: *** AM00 _default loaded
STAT: *** loading LM00 _default
STAT: reading [train.dfa] and [train.dict]...
Stat: init_voca: read 11 words
STAT: done
STAT: Gram #0 train registered
STAT: Gram #0 train: new grammar loaded, now mash it up for recognition
STAT: Gram #0 train: extracting category-pair constraint for the 1st pass
STAT: Gram #0 train: installed
STAT: Gram #0 train: turn on active
STAT: grammar update completed
STAT: *** LM00 _default loaded
STAT: ------
STAT: All models are ready, go for final fusion
STAT: [1] create MFCC extraction instance(s)
STAT: *** create MFCC calculation modules from AM
STAT: AM 0 _default: create a new module MFCC01
STAT: 1 MFCC modules created
STAT: [2] create recognition processing instance(s) with AM and LM
STAT: composing recognizer instance SR00 _default (AM00 _default, LM00 _default)
STAT: Building HMM lexicon tree
STAT: lexicon size: 168 nodes
STAT: coordination check passed
STAT: multi-gram: beam width set to 168 (guess) by lexicon change
STAT: wchmm (re)build completed
STAT: SR00 _default composed
STAT: [3] initialize for acoustic HMM calculation
Stat: outprob_init: state-level mixture PDFs, use calc_mix()
Stat: addlog: generating addlog table (size = 1953 kB)
Stat: addlog: addlog table generated
STAT: [4] prepare MFCC storage(s)
STAT: All init successfully done

STAT: ###### initialize input device
----------------------- System Information begin ---------------------
JuliusLib rev.4.3.1 (fast)

Engine specification:
 -  Base setup   : fast
 -  Supported LM : DFA, N-gram, Word
 -  Extension    : NoPThread
 -  Compiled by  : i686-w64-mingw32-gcc -O6 -fomit-frame-pointer

------------------------------------------------------------
Configuration of Modules

 Number of defined modules: AM=1, LM=1, SR=1

 Acoustic Model (with input parameter spec.):
 - AM00 "_default"
	hmmfilename=hmm12/hmmdefs

 Language Model:
 - LM00 "_default"
	grammar #1:
	    dfa  = train.dfa
	    dict = train.dict

 Recognizer:
 - SR00 "_default" (AM00, LM00)

------------------------------------------------------------
Speech Analysis Module(s)

[MFCC01]  for [AM00 _default]

 Acoustic analysis condition:
	       parameter = MFCC_0_D_N_Z (25 dim. from 12 cepstrum + c0, abs energy supressed with CMN)
	sample frequency =  8000 Hz
	   sample period = 1250  (1 = 100ns)
	     window size =  400 samples (50.0 ms)
	     frame shift =  160 samples (20.0 ms)
	    pre-emphasis = 0.97
	    # filterbank = 24
	   cepst. lifter = 22
	      raw energy = False
	energy normalize = False
	    delta window = 2 frames (40.0 ms) around
	     hi freq cut = OFF
	     lo freq cut = OFF
	 zero mean frame = OFF
	       use power = OFF
	             CVN = OFF
	            VTLN = OFF

    spectral subtraction = off

 cep. mean normalization = yes, with per-utterance self mean
 cep. var. normalization = no

	 base setup from = Julius defaults

------------------------------------------------------------
Acoustic Model(s)

[AM00 "_default"]

 HMM Info:
    44 models, 129 states, 129 mpdfs, 129 Gaussians are defined
	      model type = context dependency handling ON
      training parameter = MFCC_N_D_Z_0
	   vector length = 25
	number of stream = 1
	     stream info = [0-24]
	cov. matrix type = DIAGC
	   duration type = NULLD
	max mixture size = 1 Gaussians
     max length of model = 5 states
     logical base phones = 25
       model skip trans. = exist, require multi-path handling
      skippable models = sp (1 model(s))

 AM Parameters:
        Gaussian pruning = safe  (-gprune)
  top N mixtures to calc = 2 / 0  (-tmix)
    short pause HMM name = "sp" specified, "sp" applied (physical)  (-sp)
  cross-word CD on pass1 = handle by approx. (use max. prob. of same LC)
   sp transition penalty = -25.0

------------------------------------------------------------
Language Model(s)

[LM00 "_default"] type=grammar

 DFA grammar info:
      5 nodes, 10 arcs, 10 terminal(category) symbols
      category-pair matrix: 68 bytes (1080 bytes allocated)

 Vocabulary Info:
        vocabulary size  = 11 words, 45 models
        average word len = 4.1 models, 12.3 states
       maximum state num = 18 nodes per word
       transparent words = not exist
       words under class = not exist

 Parameters:
   found sp category IDs =

------------------------------------------------------------
Recognizer(s)

[SR00 "_default"]  AM00 "_default"  +  LM00 "_default"

 Lexicon tree:
	 total node num =    168
	  root node num =     11
	  leaf node num =     11

	(-penalty1) IW penalty1 = +5.0
	(-penalty2) IW penalty2 = +20.0
	(-cmalpha)CM alpha coef = 0.050000

	 inter-word short pause = on (append "sp" for each word tail)
	  sp transition penalty = -25.0
 Search parameters: 
	    multi-path handling = yes, multi-path mode enabled
	(-b) trellis beam width = 168 (-1 or not specified - guessed)
	(-bs)score pruning thres= disabled
	(-n)search candidate num= 1
	(-s)  search stack size = 500
	(-m)    search overflow = after 2000 hypothesis poped
	        2nd pass method = searching sentence, generating N-best
	(-b2)  pass2 beam width = 200
	(-lookuprange)lookup range= 5  (tm-5 <= t <tm+5)
	(-sb)2nd scan beamthres = 200.0 (in logscore)
	(-n)        search till = 1 candidates found
	(-output)    and output = 1 candidates out of above
	 IWCD handling:
	   1st pass: approximation (use max. prob. of same LC)
	   2nd pass: loose (apply when hypo. is popped and scanned)
	 all possible words will be expanded in 2nd pass
	 build_wchmm2() used
	 lcdset limited by word-pair constraint
	short pause segmentation = off
	fall back on search fail = off, returns search failure

------------------------------------------------------------
Decoding algorithm:

	1st pass input processing = buffered, batch
	1st pass method = 1-best approx. generating indexed trellis
	output word confidence measure based on search-time scores

------------------------------------------------------------
FrontEnd:

 Input stream:
	             input type = waveform
	           input source = waveform file
	          input filelist = testlist
	          sampling freq. = 8000 Hz required
	         threaded A/D-in = not supported (live input may be dropped)
	   zero frames stripping = on
	         silence cutting = off
	    long-term DC removal = off
	    long-term DC removal = off
	    level scaling factor = 1.00 (disabled)
	      reject short input = off
	      reject  long input = off

----------------------- System Information end -----------------------

Notice for feature extraction (01),
	*************************************************************
	* Cepstral mean normalization for batch decoding:           *
	* per-utterance mean will be computed and applied.          *
	*************************************************************

------
### read waveform input
Error: adin_file: channel num != 1 (2)
Error: adin_file: error in parsing wav header at test/baso_geser_kanan.wav
Error: adin_file: failed to read speech data: "test/baso_geser_kanan.wav"
Error: adin_file: channel num != 1 (2)
Error: adin_file: error in parsing wav header at test/baso_lanjut.wav
Error: adin_file: failed to read speech data: "test/baso_lanjut.wav"
Error: adin_file: channel num != 1 (2)
Error: adin_file: error in parsing wav header at test/baso_selesai.wav
Error: adin_file: failed to read speech data: "test/baso_selesai.wav"
Error: adin_file: channel num != 1 (2)
Error: adin_file: error in parsing wav header at test/hilmi_geser_kiri.wav
Error: adin_file: failed to read speech data: "test/hilmi_geser_kiri.wav"
Error: adin_file: channel num != 1 (2)
Error: adin_file: error in parsing wav header at test/hilmi_mulai.wav
Error: adin_file: failed to read speech data: "test/hilmi_mulai.wav"
Error: adin_file: channel num != 1 (2)
Error: adin_file: error in parsing wav header at test/leo_jeda.wav
Error: adin_file: failed to read speech data: "test/leo_jeda.wav"
Error: adin_file: channel num != 1 (2)
Error: adin_file: error in parsing wav header at test/leo_putar_kanan.wav
Error: adin_file: failed to read speech data: "test/leo_putar_kanan.wav"
Error: adin_file: channel num != 1 (2)
Error: adin_file: error in parsing wav header at test/naufal_keluar.wav
Error: adin_file: failed to read speech data: "test/naufal_keluar.wav"
Error: adin_file: channel num != 1 (2)
Error: adin_file: error in parsing wav header at test/naufal_putar_kiri.wav
Error: adin_file: failed to read speech data: "test/naufal_putar_kiri.wav"
